name: Build & Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: npm

      - name: Install frontend dependencies
        run: npm clean-install

      - name: TypeScript check
        run: npm run type-check

      - name: i18n check
        run: npm run i18n-check

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          # tauri
          sudo apt-get install -y \
              libwebkit2gtk-4.1-dev build-essential libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev \
          # xcap
          sudo apt-get install -y \
              pkg-config libclang-dev libxcb1-dev libxrandr-dev libdbus-1-dev libpipewire-0.3-dev libwayland-dev libegl-dev libgbm-dev

      - name: Rust check
        working-directory: src-tauri
        run: cargo check --locked

  build:
    needs: preflight
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: npm

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install Frontend Dependencies
        run: npm clean-install

      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # tauri
          sudo apt-get install -y \
              libwebkit2gtk-4.1-dev build-essential libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev \
          # xcap
          sudo apt-get install -y \
              pkg-config libclang-dev libxcb1-dev libxrandr-dev libdbus-1-dev libpipewire-0.3-dev libwayland-dev libegl-dev libgbm-dev

      - name: Build (Tauri)
        run: npm run tauri build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ""

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: instrata-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*-setup.exe
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app.tar.gz
            src-tauri/target/release/bundle/*/*.sig
          if-no-files-found: error

      - name: Bundle Cleanup
        run: |
          node -e "const fs=require('fs');fs.rmSync('src-tauri/target/release/bundle',{recursive:true,force:true});"

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts
          sparse-checkout-cone-mode: false

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Generate updater.json
        run: node scripts/generate-updater.cjs
        env:
          VERSION: ${{ github.ref_name }}
          REPO: ${{ github.repository }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.ref_name }}
          name: "Instrata ${{ github.ref_name }}"
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            release-artifacts/instrata-windows-latest/msi/*.msi
            release-artifacts/instrata-windows-latest/nsis/*-setup.exe
            release-artifacts/instrata-ubuntu-latest/appimage/*.AppImage
            release-artifacts/instrata-ubuntu-latest/deb/*.deb
            release-artifacts/instrata-ubuntu-latest/rpm/*.rpm
            release-artifacts/instrata-macos-latest/dmg/*.dmg
            release-artifacts/instrata-macos-latest/macos/*.app.tar.gz
            release-artifacts/updater.json
